name: kria-fde # you probably want to 'snapcraft register <name>'
base: core24 # the base snap is the execution environment for this snap
version: '2025.1' # just for humans, typically '1.2+git' or '1.3.2'
summary: Single-line elevator pitch for your amazing snap # 79 char long summary
description: |
  This is my-snap's description. You have a paragraph or two to tell the
  most important story about your snap. Keep it under 100 words though,
  we live in tweetspace and your description wants to look good in the snap
  store.
grade: devel # must be 'stable' to release into candidate/stable channels
confinement: devmode # use 'strict' once you have the right plugs and slots
platforms:
  arm64:
    build-on: [amd64, arm64]
    build-for: arm64
environment:
  LD_LIBRARY_PATH: ${SNAP}/usr/lib:${SNAP}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
  PATH: ${SNAP}/bin:/usr/libexec/gcc/aarch64-none-elf/14.3.1/:${PATH}
# prebuilt bins: https://github.com/Xilinx/embpf-bootfw-update-tool/releases/tag/v3.0
# following: https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842156/Fetch+Sources
parts:
  arm-toolchain:
    plugin: nil
    source: https://developer.arm.com/-/media/Files/downloads/gnu/13.3.rel1/binrel/arm-gnu-toolchain-13.3.rel1-x86_64-aarch64-none-elf.tar.xz
    source-type: tar
    override-build: |
      # Install the prebuilt toolchain
      mkdir -p ${CRAFT_PART_INSTALL}/toolchain
      cp -r * ${CRAFT_PART_INSTALL}/toolchain/

      # Create symlinks in a standard location
      mkdir -p ${CRAFT_PART_INSTALL}/bin
      cd ${CRAFT_PART_INSTALL}/bin
      for tool in ${CRAFT_PART_INSTALL}/toolchain/bin/aarch64-none-elf-*; do
        ln -sf "$tool" "$(basename $tool)"
      done
    stage:
      - toolchain/
      - bin/
    prime:
      - -*
  ###################### END OF TOOLCHAIN SETUP ###############################
  blobs:
    plugin: nil
    source: https://github.com/Xilinx/soc-prebuilt-firmware.git
    source-type: git
    source-tag: xilinx_v2024.2_update1
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/prebuilt
      cp kv260-kria/* ${CRAFT_PART_INSTALL}/prebuilt/
    prime:
      - -*
  fsbl:
    after:
      - arm-toolchain
    plugin: nil
    source: https://github.com/Xilinx/embeddedsw.git
    source-tag: xilinx_v2025.1_update1
    build-packages:
      - cmake
      - ninja-build
    build-environment:
      - PATH: '${CRAFT_STAGE}/bin:${PATH}'
      - PROC: 'a53'
      - BOARD: 'zcu102'
      - A53_STATE: '64'
    override-build: |
      # Copy psu_init files to som directory
      cp ${CRAFT_PROJECT_DIR}/extras/psu_init.c lib/sw_apps/zynqmp_fsbl/misc/zcu102/
      cp ${CRAFT_PROJECT_DIR}/extras/psu_init.h lib/sw_apps/zynqmp_fsbl/misc/zcu102/

      # Switch to traditional make build as CMake seems to have issues
      cd lib/sw_apps/zynqmp_fsbl/src/

      make clean
      make BOARD=zcu102 \
           CROSS_COMPILE=aarch64-none-elf- \
           -j$(nproc)


      # Install the built FSBL
      install -D -m 0644 fsbl.elf ${CRAFT_PART_INSTALL}/blobs/fsbl.elf
      install -D -m 0644 ${CRAFT_PROJECT_DIR}/blobs/fsbl-k26-sm-sdt.elf ${CRAFT_PART_INSTALL}/blobs/fsbl-k26-sm-sdt.elf
    stage:
      - blobs/fsbl.elf
      - blobs/fsbl-k26-sm-sdt.elf
    prime:
      - -*
  #pmu-firmware:
  #  plugin: nil
  #  source: https://github.com/Xilinx/embeddedsw.git
  #  source-tag: xilinx_v2025.1_update1
  #  build-packages:
  #    - wget
  #    - cmake
  #  override-pull: |
  #    craftctl default
  #    wget https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-elf.tar.xz
  #    tar xvf arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-elf.tar.xz
  #  override-build: |
  #    TOOLCHAIN_DIR="$(pwd)/arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-elf"
  #    # Add the toolchain's main bin directory to the PATH
  #    export PATH="$TOOLCHAIN_DIR/bin:$PATH"

  #    # The toolchain is looking for helpers in a hardcoded system path.
  #    # We create that path and symlink our locally extracted toolchain libs into it.
  #    # This requires sudo, which is available during Snapcraft builds.
  #    HARDCODED_PATH="/usr/libexec/gcc/aarch64-none-elf/14.3.1"
  #    ACTUAL_LIBS_PATH="$TOOLCHAIN_DIR/libexec/gcc/aarch64-none-elf/14.3.1"

  #    echo "Applying symlink fix for hardcoded toolchain path..."
  #    if [ -d "$ACTUAL_LIBS_PATH" ]; then
  #      # Create the parent directories for the hardcoded path
  #      mkdir -p "$(dirname "$HARDCODED_PATH")"
  #      # Create the symbolic link
  #      ln -s "$ACTUAL_LIBS_PATH" "$HARDCODED_PATH" || true
  #      echo "Symlink created successfully."
  #    else
  #      echo "ERROR: Toolchain internal directory not found at $ACTUAL_LIBS_PATH"
  #      exit 1
  #    fi

  #    cd lib/sw_apps/zynqmp_pmufw/src/
  #    make
  #    #install -D -m 0644 fsbl.elf ${CRAFT_PART_INSTALL}/blobs/fsbl.elf
  #  stage:
  #    - blobs/fsbl.elf
  #  prime:
  #    - -*
  arm-trusted-firmware:
    # See 'snapcraft plugins'
    plugin: nil
    source: https://github.com/Xilinx/arm-trusted-firmware.git
    source-type: git
    source-tag: xlnx_rebase_v2.12_2025.1
    build-packages:
      - crossbuild-essential-arm64
    build-environment:
      - PLAT: 'zynqmp'
      - RESET_TO_BL31: '1'
      - CROSS_COMPILE: '${CRAFT_ARCH_TRIPLET_BUILD_FOR}-'
      - CC: '${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc'
    override-build: |
      make CROSS_COMPILE=${CROSS_COMPILE} PLAT=${PLAT} RESET_TO_BL31=${RESET_TO_BL31} -j$(nproc)
      install -D -m 0644 build/${PLAT}/release/bl31/bl31.elf ${CRAFT_PART_INSTALL}/blobs/bl31.elf
    stage:
      - blobs/bl31.elf
    prime:
      - -*
  u-boot:
    plugin: nil
    source: https://github.com/Xilinx/u-boot-xlnx.git
    source-branch: xlnx_rebase_v2025.01_update
    source-type: git
    build-packages:
      - crossbuild-essential-arm64
      - bc
      - bison
      - flex
      - swig
      - libgnutls28-dev
      - libssl-dev
      - device-tree-compiler
    build-environment:
      - ARCH: 'arm64'
      - CROSS_COMPILE: '${CRAFT_ARCH_TRIPLET_BUILD_FOR}-'
      # k26 kv device tree
      - DEVICE_TREE: 'zynqmp-smk-k26-revA-sck-kv-g-revB'
    override-build: |
      # Add GIT revision to the local version
      head=$(git rev-parse --verify --short HEAD 2> /dev/null)
      version=$(make ubootversion)
      printf "%s%s%s%s" "-${version}" "-rz" "+g" "${head}" > .scmversion

      make xilinx_zynqmp_kria_defconfig
      make DEVICE_TREE=${DEVICE_TREE} -j$(nproc)
      install -D -m 0644 u-boot.elf ${CRAFT_PART_INSTALL}/blobs/u-boot.elf
    prime:
      - -*
  bootgen:
    plugin: nil
    source: https://github.com/Xilinx/bootgen.git
    source-type: git
    source-branch: xlnx_rel_v2025.1
    override-build: |
      make
      cp build/bin/bootgen $CRAFT_PART_INSTALL/bootgen
    prime:
      - -*
  boot-bin:
    after:
      - blobs
      - bootgen
      - fsbl
      - u-boot
      - arm-trusted-firmware
      #- pmu-firmware
    plugin: dump
    source: .
    build-environment:
      - ARCH: 'zynqmp'
    override-build: |
      cp bootgen.bif ${CRAFT_STAGE}/
      cd ${CRAFT_STAGE}
      ./bootgen -w -image bootgen.bif -arch ${ARCH} -o ${CRAFT_PART_INSTALL}/BOOT.bin
    prime:
      - BOOT.bin
