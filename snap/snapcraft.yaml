name: kria-fde # you probably want to 'snapcraft register <name>'
base: core24 # the base snap is the execution environment for this snap
version: '2025.1' # just for humans, typically '1.2+git' or '1.3.2'
summary: Single-line elevator pitch for your amazing snap # 79 char long summary
description: |
  This is my-snap's description. You have a paragraph or two to tell the
  most important story about your snap. Keep it under 100 words though,
  we live in tweetspace and your description wants to look good in the snap
  store.
grade: devel # must be 'stable' to release into candidate/stable channels
confinement: devmode # use 'strict' once you have the right plugs and slots
platforms:
  arm64:
    build-on: [amd64, arm64]
    build-for: arm64
# prebuilt bins: https://github.com/Xilinx/embpf-bootfw-update-tool/releases/tag/v3.0
# following: https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842156/Fetch+Sources
parts:
  microblaze-toolchain:
    plugin: nil
    source: https://github.com/buildroot/buildroot.git
    source-type: git
    #source-tag: 2024.02.8
    source-tag: 2025.05.1
    build-packages:
      - build-essential
      - texinfo
      - bison
      - flex
      - gawk
      - libtool
      - automake
      - libncurses5-dev
      - gettext
      - zlib1g-dev
      - rsync
      - file
      - bc
      - wget
      - cpio
      - python3
      - unzip
    override-build: |
      # Create a proper MicroBlaze baremetal defconfig
      cat > configs/microblaze_baremetal_defconfig << 'EOF'
      BR2_microblazeel=y
      BR2_TOOLCHAIN_BUILDROOT=y
      BR2_TOOLCHAIN_BUILDROOT_VENDOR="xilinx"
      BR2_TOOLCHAIN_BUILDROOT_LIBC="newlib"
      BR2_TOOLCHAIN_BUILDROOT_NEWLIB=y
      BR2_TOOLCHAIN_BUILDROOT_CXX=y
      BR2_GCC_VERSION_13_X=y
      BR2_BINUTILS_VERSION_2_42_X=y
      BR2_INIT_NONE=y
      BR2_SYSTEM_BIN_SH_NONE=y
      # Disable kernel and rootfs - we only want toolchain
      BR2_LINUX_KERNEL=n
      BR2_TARGET_ROOTFS_TAR=n
      BR2_PACKAGE_BUSYBOX=n
      # Enable newlib nano for embedded
      BR2_TOOLCHAIN_BUILDROOT_NEWLIB_NANO=y
      EOF

      # Configure buildroot with our custom config
      make microblaze_baremetal_defconfig

      # Build only the toolchain
      make toolchain -j$(nproc)

      # Install the toolchain
      mkdir -p ${CRAFT_PART_INSTALL}/microblaze-toolchain
      cp -r output/host/* ${CRAFT_PART_INSTALL}/microblaze-toolchain/
    stage:
      - microblaze-toolchain/
    prime:
      - -*
  arm-toolchain:
    plugin: nil
    source: https://developer.arm.com/-/media/Files/downloads/gnu/13.3.rel1/binrel/arm-gnu-toolchain-13.3.rel1-x86_64-aarch64-none-elf.tar.xz
    source-type: tar
    override-build: |
      # Install the prebuilt toolchain
      mkdir -p ${CRAFT_PART_INSTALL}/toolchain
      cp -r * ${CRAFT_PART_INSTALL}/toolchain/

      # Create symlinks in a standard location
      mkdir -p ${CRAFT_PART_INSTALL}/bin
      cd ${CRAFT_PART_INSTALL}/bin
      for tool in ${CRAFT_PART_INSTALL}/toolchain/bin/aarch64-none-elf-*; do
        ln -sf "$tool" "$(basename $tool)"
      done
    stage:
      - toolchain/
      - bin/
    prime:
      - -*
  ###################### END OF TOOLCHAIN SETUP ###############################
  blobs:
    plugin: dump
    source: .
    build-packages:
      - xxd
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/prebuilt
      mkdir -p ${CRAFT_PART_INSTALL}/blobs
      cp extras/bins/* ${CRAFT_PART_INSTALL}/prebuilt/
      echo "${CRAFT_PROJECT_VERSION}" | xxd -p > ${CRAFT_PART_INSTALL}/blobs/bootbin-version-header.txt
    prime:
      - -*
  fsbl:
    after:
      - arm-toolchain
    plugin: nil
    source: https://github.com/Xilinx/embeddedsw.git
    source-tag: xilinx_v2025.1_update1
    build-environment:
      - PATH: '${CRAFT_STAGE}/bin:${PATH}'
      - PROC: 'a53'
      - BOARD: 'som'
      - A53_STATE: '64'
    override-build: |
      # Copy psu_init files to som directory
      cp ${CRAFT_PROJECT_DIR}/extras/psu_init.c lib/sw_apps/zynqmp_fsbl/misc/som/
      cp ${CRAFT_PROJECT_DIR}/extras/psu_init.h lib/sw_apps/zynqmp_fsbl/misc/som/

      # Switch to traditional make build as CMake seems to have issues
      cd lib/sw_apps/zynqmp_fsbl/src/

      make clean
      make BOARD=som \
           CROSS_COMPILE=aarch64-none-elf- \
           CFLAGS+=-DFSBL_DEBUG_INFO \
           -j$(nproc)

      # Install the built FSBL
      install -D -m 0644 fsbl.elf ${CRAFT_PART_INSTALL}/blobs/fsbl.elf
    stage:
      - blobs/fsbl.elf
    prime:
      - -*
  pmu-firmware:
    after:
      - microblaze-toolchain
    plugin: nil
    source: https://github.com/Xilinx/embeddedsw.git
    source-tag: xilinx_v2025.1_update1
    build-environment:
      - PATH: '${CRAFT_STAGE}/microblaze-toolchain/bin:${PATH}'
      - MB_GNU: '${CRAFT_STAGE}/microblaze-toolchain'
    override-build: |
      # TODO: skip pmu-firmware build for now
      exit 0
      # Find the actual MicroBlaze compiler
      MB_COMPILER=$(find ${CRAFT_STAGE}/microblaze-toolchain/bin -name "microblaze*-gcc" | head -1)
      if [ -z "$MB_COMPILER" ]; then
        echo "ERROR: Could not find MicroBlaze compiler!"
        exit 1
      fi

      # Extract the toolchain prefix
      MB_PREFIX=$(basename $MB_COMPILER | sed 's/-gcc$//')
      echo "Found MicroBlaze toolchain: $MB_PREFIX"

      # Test the compiler
      $MB_COMPILER --version || (echo "MicroBlaze GCC test failed!" && exit 1)

      # Build PMU firmware
      cd lib/sw_apps/zynqmp_pmufw/src/

      # Clean any previous builds
      make clean || true

      # Find the sysroot for the toolchain
      SYSROOT="${CRAFT_STAGE}/microblaze-toolchain/${MB_PREFIX}/sysroot"
      if [ ! -d "$SYSROOT" ]; then
        # Try alternate location
        SYSROOT="${CRAFT_STAGE}/microblaze-toolchain/sysroot"
      fi

      echo "Using sysroot: $SYSROOT"

      # Build with our buildroot toolchain using full names and proper sysroot
      make COMPILER=${MB_PREFIX}-gcc \
           ARCHIVER=${MB_PREFIX}-ar \
           CC=${MB_PREFIX}-gcc \
           CFLAGS="-Os -flto --sysroot=${SYSROOT}" \
           -j$(nproc)

      # Verify the build output
      if [ ! -f executable.elf ]; then
        echo "ERROR: PMU firmware build failed - executable.elf not found"
        exit 1
      fi

      # Install the firmware
      install -D -m 0644 executable.elf ${CRAFT_PART_INSTALL}/blobs/pmufw.elf
      echo "PMU firmware built and installed successfully"
    # stage:
    #   - blobs/pmufw.elf
    prime:
      - -*
  arm-trusted-firmware:
    plugin: nil
    source: https://github.com/Xilinx/arm-trusted-firmware.git
    source-type: git
    source-tag: xlnx_rebase_v2.12_2025.1
    build-packages:
      - crossbuild-essential-arm64
    build-environment:
      - PLAT: 'zynqmp'
      - RESET_TO_BL31: '1'
      - RESET_TO_BL2: '0'
      - CROSS_COMPILE: '${CRAFT_ARCH_TRIPLET_BUILD_FOR}-'
      - CC: '${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc'
      - LD: '${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc'
      - ZYNQMP_CONSOLE: 'cadence1'
      - PRELOADED_BL33_BASE: '0x8000000'
      - BL32_BASE: '0x60000000'
    override-build: |
      make CROSS_COMPILE=${CROSS_COMPILE} \
        PLAT=${PLAT} \
        RESET_TO_BL31=${RESET_TO_BL31} \
        RESET_TO_BL2=${RESET_TO_BL2} \
        ZYNQMP_CONSOLE=${ZYNQMP_CONSOLE} \
        PRELOADED_BL33_BASE=${PRELOADED_BL33_BASE} \
        BL32_BASE=${BL32_BASE} \
        SPD=opteed \
        -j$(nproc) bl31
        # NEED_BL32=yes \
      install -D -m 0644 build/${PLAT}/release/bl31/bl31.elf ${CRAFT_PART_INSTALL}/blobs/arm-trusted-firmware.elf
    stage:
      - blobs/arm-trusted-firmware.elf
    prime:
      - -*
  optee-os:
    plugin: nil
    source: https://github.com/Xilinx/optee_os.git
    source-type: git
    source-tag: xlnx_rebase_v4.5.0_2025.1_update1
    override-pull: |
      craftctl default
      curl https://storage.googleapis.com/git-repo-downloads/repo > /bin/repo && chmod a+x /bin/repo
      repo init -u https://github.com/Xilinx/optee_manifest.git
      cp ${CRAFT_PROJECT_DIR}/optee_zynqmp.xml .repo/manifests/
      repo init -m optee_zynqmp.xml && repo sync -j$(nproc)
    build-packages:
      - python3-cryptography
      - python3-pyelftools
      - uuid-dev
    build-environment:
      - PLATFORM: zynqmp-zcu102
      - CFG_ARM64_core: y
      - CFG_TEE_CORE_LOG_LEVEL: '2'
      - CFG_TEE_TA_LOG_LEVEL: '2'
      - CFG_ENABLE_EMBEDDED_TESTS: 'n'
      - CFG_REE_FS: 'y'
      - CFG_RPMB_FS: 'n'
    override-build: |
      cd build
      make toolchains
      make PLATFORM=${PLATFORM} \
        optee-os
      install -D -m 0644 ${CRAFT_PART_BUILD}/optee_os/out/arm/core/tee.elf \
                         ${CRAFT_PART_INSTALL}/blobs/tee.elf
      install -D -m 0644 ${CRAFT_PART_BUILD}/optee_os/out/arm/core/tee-raw.bin \
                         ${CRAFT_PART_INSTALL}/blobs/tee.bin
    prime:
      - -*
  u-boot:
    plugin: nil
    source: https://github.com/Xilinx/u-boot-xlnx.git
    source-branch: xlnx_rebase_v2025.01_update
    source-type: git
    build-packages:
      - crossbuild-essential-arm64
      - bc
      - bison
      - flex
      - swig
      - libgnutls28-dev
      - libssl-dev
      - device-tree-compiler
    build-environment:
      - ARCH: 'arm64'
      - CROSS_COMPILE: '${CRAFT_ARCH_TRIPLET_BUILD_FOR}-'
      # k26 kv device tree
      - DEVICE_TREE: 'zynqmp-smk-k26-revA-sck-kv-g-revB'
    override-build: |
      # Add custom version from snapcraft.yaml
      head=$(git rev-parse --verify --short HEAD 2> /dev/null)
      version=$(make ubootversion)

      make xilinx_zynqmp_kria_defconfig
      # Set custom version directly via LOCALVERSION
      make DEVICE_TREE=${DEVICE_TREE} \
           LOCALVERSION="-snap-${SNAPCRAFT_PROJECT_VERSION}[tchavadar]" \
           -j$(nproc)
      install -D -m 0644 u-boot.elf ${CRAFT_PART_INSTALL}/blobs/u-boot.elf
    prime:
      - -*
  bootgen:
    plugin: nil
    source: https://github.com/Xilinx/bootgen.git
    source-type: git
    source-branch: xlnx_rel_v2025.1
    override-build: |
      make
      cp build/bin/bootgen $CRAFT_PART_INSTALL/bootgen
    prime:
      - -*
  boot-bin:
    after:
      - blobs
      - bootgen
      - fsbl
      - arm-trusted-firmware
      - optee-os
      - u-boot
      - pmu-firmware
    plugin: dump
    source: .
    build-environment:
      - ARCH: 'zynqmp'
    override-build: |
      cp bootgen.bif ${CRAFT_STAGE}/
      cd ${CRAFT_STAGE}
      ./bootgen -w -image bootgen.bif -arch ${ARCH} -o ${CRAFT_PART_INSTALL}/BOOT.bin
    prime:
      - BOOT.bin
